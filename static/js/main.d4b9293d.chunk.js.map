{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","graphql/index.js","assets/loading.svg","components/time-button/time-button.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","wsLink","WebSocketLink","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","ApolloLink","from","SleepTimes","gql","_templateObject","Object","taggedTemplateLiteral","SLEEP_CHANGED","_templateObject2","createSleep","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","react_default","a","createElement","d","attributeName","type","to","dur","repeatCount","loading_SvgLoading","svgRef","props","width","height","viewBox","xmlSpace","ref","ForwardRef","forwardRef","p","TimeCalculator","time_array","reduce","accum","time","this_time","objectSpread2","asleep","awake","createTimeString","date","minutes","getMinutes","hours","getHours","concat","TimeButton","sub","useSubscription","_useQuery","useQuery","pollInterval","notifyOnNetworkStatusChange","loading","data","refetch","networkStatus","_useMutation","useMutation","_useMutation2","slicedToArray","createSleepHook","_useState","slp_data","useState","last_load","Date","_useState2","sleepObj","setSleepObj","_useState3","_useState4","actionTime","setActionTime","useEffect","sleepChanged","sleeps","Fragment","className","onClick","variables","now","res","blur","style","cursor","NetworkStatus","ready","ReactDOM","render","time_button","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","Service-Worker","response","contentType","get","status","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d4b9293d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\n\n\nimport {\n    gql,\n    split,\n    ApolloClient,\n    useQuery,\n    ApolloLink,\n    useSubscription,\n    HttpLink,\n    InMemoryCache,\n    useMutation,\n  } from \"@apollo/client\";\n  \n  \n\n// 3\nconst httpLink = new HttpLink({\n    uri: \"https://sono-morena.herokuapp.com/graphql\",\n  });\n  \n  const wsLink = new WebSocketLink({\n    uri: \"wss://sono-morena.herokuapp.com/graphql\",\n  });\n  \n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === \"OperationDefinition\" &&\n        definition.operation === \"subscription\"\n      );\n    },\n    wsLink,\n    httpLink\n  );\n  \n  export const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: ApolloLink.from([splitLink]),\n  });\n  \n  export const SleepTimes = gql`\n    query getSleep {\n      sleeps {\n        time\n        type\n      }\n    }\n  `;\n  \n  export const SLEEP_CHANGED = gql`\n    subscription Sub {\n      sleepChanged {\n        time\n        type\n      }\n    }\n  `;\n  \n  // function NumberInv() {\n  //   const {\n  //     data,\n  //     loading,\n  //   } = useSubscription(SLEEP_CHANGED);\n  //   console.log(data)\n  //   if(!loading){\n  //   return <h4>New comment: {data.sleepChanged.time} </h4>;}else{\n  //     return \"\"\n  //   }\n  \n  export const createSleep = gql(`\n  mutation  createSleep($time:DateTime!, $type:String!){\n          createSleep(time:$time,  type:$type){\n            type\n            time\n  }}`);","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M75.4 126.63a11.43 11.43 0 0 1-2.1-22.65 40.9 40.9 0 0 0 30.5-30.6 11.4 11.4 0 1 1 22.27 4.87h.02a63.77 63.77 0 0 1-47.8 48.05v-.02a11.38 11.38 0 0 1-2.93.37z\"\n}), /*#__PURE__*/React.createElement(\"animateTransform\", {\n  attributeName: \"transform\",\n  type: \"rotate\",\n  from: \"0 64 64\",\n  to: \"360 64 64\",\n  dur: \"500ms\",\n  repeatCount: \"indefinite\"\n}));\n\nvar SvgLoading = function SvgLoading(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"30px\",\n    height: \"30px\",\n    viewBox: \"0 0 128 128\",\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgLoading, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/loading.e36afe81.svg\";\nexport { ForwardRef as ReactComponent };","import { SLEEP_CHANGED, SleepTimes, createSleep } from \"../../graphql\";\nimport {\n  useQuery,\n  useMutation,\n  useSubscription,\n  NetworkStatus,\n} from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { ReactComponent as Loader } from \"../../assets/loading.svg\";\n\nfunction TimeButton() {\n  const sub = useSubscription(SLEEP_CHANGED);\n  const { loading, error, data, refetch, networkStatus } = useQuery(\n    SleepTimes,\n    { pollInterval: 30000, notifyOnNetworkStatusChange: true }\n  );\n  const [createSleepHook, { slp_data }] = useMutation(createSleep);\n  const [sleepObj, setSleepObj] = useState({\n    type: \"\",\n    last_load: new Date(0),\n  });\n\n  const [actionTime, setActionTime] = useState(\"\");\n\n  const addHour = (time) => time + 3600000;\n  const removeHour = (time) => time - 3600000;\n  const addMinutes = (time, minutes) => time + 60000 * minutes;\n  const removeMinutes = (time, minutes) => time - 60000 * minutes;\n\n  useEffect(() => {\n    if (!loading) {\n      if (sub.data) {\n        setSleepObj({ ...sub.data.sleepChanged, last_load: new Date() });\n      } else {\n        if (data.sleeps) {\n          setSleepObj({\n            ...data.sleeps[data.sleeps.length - 1],\n            last_load: new Date(),\n          });\n          console.log(TimeCalculator(data.sleeps));\n        }\n      }\n    }\n  }, [data, sub.data]);\n\n  return (\n    <>\n      {sleepObj.type === \"\" ? (\n        <div className=\"container container-blue\">\n          <Loader></Loader>\n        </div>\n      ) : (\n        <div\n          className={`${\n            sleepObj.type === \"start\" ? \"container-blue\" : \"container-green\"\n          } container`}\n        >\n          <h1>\n            {\" \"}\n            Morena está {sleepObj.type === \"start\" ? \"dormindo\" : \"acordada\"}\n          </h1>\n          <h3> desde as {createTimeString(new Date(sleepObj.time))}</h3>\n          <div className=\"button-grid\">\n            <div className={`set-time-flex ${actionTime ? \"\" : \"hidden\"}`}>\n              <button\n                className=\"change-time-button\"\n                onClick={() => setActionTime(addHour(actionTime))}\n              >\n                +\n              </button>\n              <button\n                className=\"change-time-button\"\n                onClick={() => setActionTime(removeHour(actionTime))}\n              >\n                -\n              </button>\n            </div>\n            <div className=\"central-button-flex\">\n              <button\n                className=\"but\"\n                onClick={(e) => {\n                  createSleepHook({\n                    variables: {\n                      time: actionTime ? actionTime : Date.now(),\n                      type: sleepObj.type === \"start\" ? \"end\" : \"start\",\n                    },\n                  }).then((res) =>\n                    setSleepObj({\n                      ...res.data.createSleep,\n                      last_load: new Date(),\n                    })\n                  );\n\n                  e.target.blur();\n                }}\n              >\n                <h1>{sleepObj.type === \"start\" ? \"Acordou\" : \"Dormiu\"} </h1>\n                <h3>\n                  {actionTime\n                    ? createTimeString(new Date(actionTime))\n                    : \"Agora\"}\n                </h3>\n              </button>\n            </div>\n\n            <div className={`set-time-flex ${actionTime ? \"\" : \"hidden\"}`}>\n              <button\n                className=\"change-time-button\"\n                onClick={() => setActionTime(addMinutes(actionTime, 1))}\n              >\n                +\n              </button>\n              <button\n                className=\"change-time-button\"\n                onClick={() => setActionTime(removeMinutes(actionTime, 1))}\n              >\n                -\n              </button>\n            </div>\n          </div>\n          <button\n            className=\"other-time-button\"\n            style={{ cursor: \"pointer\" }}\n            onClick={(e) => {\n              actionTime ? setActionTime(\"\") : setActionTime(Date.now());\n            }}\n          >\n            {actionTime ? \"Cancelar\" : \"Outro horário?\"}\n          </button>\n\n          {networkStatus === NetworkStatus.ready ? (\n            <button\n              className=\"update_button\"\n              style={{ cursor: \"pointer\" }}\n              onClick={(e) => {\n                setSleepObj({ ...sleepObj, last_load: new Date() });\n                refetch();\n              }}\n            >\n              Atualizado as {createTimeString(sleepObj.last_load)}\n            </button>\n          ) : (\n            <Loader className=\"loader\"></Loader>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nconst TimeCalculator = (time_array) => {\n  time_array.reduce(\n    (accum, time, i) => {\n      console.log(accum);\n      if (i > 0) {\n        const this_time = time.time - time_array[i - 1].time;\n        if (time.type === \"end\") {\n          return { ...accum, asleep: accum.asleep + this_time };\n        } else {\n          return { ...accum, awake: accum.awake + this_time };\n        }\n      } else {\n        return accum;\n      }\n    },\n    { awake: 0, asleep: 0 }\n  );\n};\n\nfunction addZero(number) {\n  return `${number}`;\n}\n\nfunction createTimeString(date) {\n  const minutes = date.getMinutes();\n  // console.log(minutes);\n  const hours = date.getHours();\n  return `${hours}:${minutes > 9 ? \"\" : \"0\"}${minutes}`;\n}\n\nexport default TimeButton;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Times from \"./components/time-button/time-button\"\nimport {\n  ApolloProvider,\n} from \"@apollo/client\";\n\nimport {client} from \"./graphql\"\nconsole.log(\"here\");\n// 4\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Times />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}